#version 450
#extension GL_GOOGLE_include_directive : enable
#include "./common.glsl"

#ifdef DEBUG
#extension GL_EXT_debug_printf : enable
#endif


layout (std430, binding = 0) readonly buffer Vertices {
    Vertex vertices[];
};

layout (std430, binding = 1) writeonly buffer Cov3Ds {
    float cov3ds[];
};

layout( push_constant ) uniform Constants
{
    float scale_factor;
};

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

void main() {
    uint index = gl_GlobalInvocationID.x;
    if (index >= vertices.length()) {
        return;
    }

    mat3 S = mat3(1.0);
    S[0][0] = vertices[index].scale_opacity.x * scale_factor;
    S[1][1] = vertices[index].scale_opacity.y * scale_factor;
    S[2][2] = vertices[index].scale_opacity.z * scale_factor;

    // Compute rotation matrix from quaternion
    mat3 R = rotationFromQuaternion(vertices[index].rotation);

    mat3 M = S * R;
    mat3 cov3d = transpose(M) * M;

    cov3ds[index * 6] = cov3d[0][0];
    cov3ds[index * 6 + 1] = cov3d[0][1];
    cov3ds[index * 6 + 2] = cov3d[0][2];
    cov3ds[index * 6 + 3] = cov3d[1][1];
    cov3ds[index * 6 + 4] = cov3d[1][2];
    cov3ds[index * 6 + 5] = cov3d[2][2];

    #ifdef DEBUG
    if (index == 0) {
        debugPrintfEXT("scale: %f %f %f\n", vertices[index].scale_opacity.x, vertices[index].scale_opacity.y, vertices[index].scale_opacity.z);
        debugPrintfEXT("cov3d: %f %f %f %f %f %f\n", cov3d[0][0], cov3d[0][1], cov3d[0][2], cov3d[1][1], cov3d[1][2], cov3d[2][2]);
    }
    #endif
}